#!/usr/bin/env python
import allhic_adjuster
import argparse


def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title="sub commands")

    # locator options
    parser_locator = subparsers.add_parser('locator', help='Visualize each block of chromosome')
    parser_locator.add_argument('-q', '--query', help='Query bed file', required=True)
    parser_locator.add_argument('-r', '--reference', help='Reference bed file', required=True)
    parser_locator.add_argument('-c', '--anchors', help='Query.Reference.anchors file, generated by jcvi',
                                required=True)
    parser_locator.add_argument('-a', '--agp', help='AGP file of query genome', required=True)
    parser_locator.add_argument('-s', '--resolution', help='Resolution means 1/resolution of chromosome length, '
                                                           'default=20', default=20, type=float)
    parser_locator.add_argument('-o', '--outpic', help='Output picture', required=True)
    parser_locator.set_defaults(func=allhic_adjuster.locator.locator)

    # extractor options
    parser_extractor = subparsers.add_parser('extractor', help="Extract sequences")
    parser_extractor_subparsers = parser_extractor.add_subparsers(title="extractor commands")

    # extract by tour
    parser_extractor_tour = parser_extractor_subparsers.add_parser('tour', help="Extract sequences with tour")
    parser_extractor_tour.add_argument('-i', '--input', help='Input tour file or input directory of tours',
                                       required=True)
    parser_extractor_tour.add_argument('-r', '--fasta', help='Fasta file for extracting', required=True)
    parser_extractor_tour.add_argument('-o', '--output', help='Output fasta file or output directory', required=True)
    parser_extractor_tour.set_defaults(func=allhic_adjuster.extractor.extract_by_tour)

    # extract by list
    parser_extractor_list = parser_extractor_subparsers.add_parser('list', help="Extract sequences with list")
    parser_extractor_list.add_argument('-i', '--input', help='Input fasta file', required=True)
    parser_extractor_list.add_argument('-l', '--list', help='Input list file', required=True)
    parser_extractor_list.add_argument('--not_in', help='If this parameter is setting, the sequence id not in th list '
                                                        'file will be extracted', action="store_true")
    parser_extractor_list.add_argument('-o', '--output', help='Output fasta file', required=True)
    parser_extractor_list.set_defaults(func=allhic_adjuster.extractor.extract_by_list)

    # convertor options
    parser_convertor = subparsers.add_parser('convertor', help='Convert files')
    parser_convertor_subparsers = parser_convertor.add_subparsers(title='convertor commands')

    # convert agp to tours
    parser_convertor_agp2tour = parser_convertor_subparsers.add_parser('agp2tour', help='Convert AGP file to tour files')
    parser_convertor_agp2tour.add_argument('-a', '--agp', help='Input AGP file', required=True)
    parser_convertor_agp2tour.add_argument('-o', '--outdir', help='Output directory', required=True)
    parser_convertor_agp2tour.set_defaults(func=allhic_adjuster.converter.agp2tour)

    # convert tour to txt
    parser_convertor_tour2txt = parser_convertor_subparsers.add_parser('tour2txt', help='Convert tour to txt file')
    parser_convertor_tour2txt.add_argument('-i', '--input', help='Input tour file', required=True)
    parser_convertor_tour2txt.add_argument('-c', '--countREs', help='Input countREs file', required=True)
    parser_convertor_tour2txt.add_argument('-o', '--output', help='Output countREs file', required=True)
    parser_convertor_tour2txt.set_defaults(func=allhic_adjuster.converter.tour2txt)

    # convert tours to cluster
    parser_convertor_tours2cluster = parser_convertor_subparsers.add_parser('tours2cluster', help='Convert tour files '
                                                                            'to cluster file')
    parser_convertor_tours2cluster.add_argument('-i', '--input', help='Input tour directory', required=True)
    parser_convertor_tours2cluster.add_argument('-o', '--output', help='Output cluster file', required=True)
    parser_convertor_tours2cluster.set_defaults(func=allhic_adjuster.converter.tours2cluster)

    # convert txt files to cluster
    parser_convertor_txt2cluster = parser_convertor_subparsers.add_parser('txt2cluster', help='Convert txt files to '
                                                                                              'cluster file')
    parser_convertor_txt2cluster.add_argument('-i', '--input', help='Input txt directory', required=True)
    parser_convertor_txt2cluster.add_argument('-o', '--output', help='Output cluster file', required=True)
    parser_convertor_txt2cluster.set_defaults(func=allhic_adjuster.converter.txt2cluster)

    # convert jcvi anchors to circos link file
    parser_convertor_anchors2circos = parser_convertor_subparsers.add_parser('anchors2circos', help='Convert anchors '
                                                                                                    'to circos link '
                                                                                                    'file')
    parser_convertor_anchors2circos.add_argument('-q', '--query', help='Query bed file', required=True)
    parser_convertor_anchors2circos.add_argument('-r', '--reference', help='Reference bed file', required=True)
    parser_convertor_anchors2circos.add_argument('-a', '--anchors', help='Query.Reference.anchors', required=True)
    parser_convertor_anchors2circos.add_argument('-o', '--output', help='Output circos link file', required=True)
    parser_convertor_anchors2circos.set_defaults(func=allhic_adjuster.converter.anchors2circos)

    # convert RaGOO ordering files to AGP file
    parser_convertor_ragoo2agp = parser_convertor_subparsers.add_parser('ragoo2agp', help='Convert RaGOO ordering '
                                                                        'files to AGP file')
    parser_convertor_ragoo2agp.add_argument('-i', '--input', help='Input directory of ordering files', required=True)
    parser_convertor_ragoo2agp.add_argument('-f', '--fasta', help='Input contig fasta file', required=True)
    parser_convertor_ragoo2agp.add_argument('-o', '--output', help='Output AGP file', required=True)
    parser_convertor_ragoo2agp.set_defaults(func=allhic_adjuster.converter.ragoo2agp)

    # convert single RaGOO ordering file to tour
    parser_convertor_ragoo2tour = parser_convertor_subparsers.add_parser('ragoo2tour', help='Convert single RaGOO '
                                                                                            'ordering file to tour '
                                                                                            'file')
    parser_convertor_ragoo2tour.add_argument('-i', '--input', help='Input ordering file', required=True)
    parser_convertor_ragoo2tour.add_argument('-o', '--output', help='Output tour file', required=True)
    parser_convertor_ragoo2tour.set_defaults(func=allhic_adjuster.converter.ragoo2tour)

    # adjuster options
    parser_adjuster = subparsers.add_parser('adjuster', help='Adjust tour or group files')
    parser_adjuster_subparsers = parser_adjuster.add_subparsers(title='Adjuster commands')

    # merge tours
    parser_adjuster_merge = parser_adjuster_subparsers.add_parser('merge', help='Merge tour files')
    parser_adjuster_merge.add_argument('-i', '--input', help='Input tour files, separated by comma', required=True)
    parser_adjuster_merge.add_argument('-o', '--output', help='Output tour file', required=True)
    parser_adjuster_merge.set_defaults(func=allhic_adjuster.adjuster.merge_tours)

    # reverse single tour
    parser_adjuster_reverse = parser_adjuster_subparsers.add_parser('reverse', help='Reverse tour file')
    parser_adjuster_reverse.add_argument('-i', '--input', help='Input tour file, original file will be backup with '
                                                               '.bak', required=True)
    parser_adjuster_reverse.set_defaults(func=allhic_adjuster.adjuster.reverse_tour)

    # split tour or txt with contigs
    parser_adjuster_split = parser_adjuster_subparsers.add_parser('split', help='Split tour file or txt file')
    parser_adjuster_split.add_argument('-i', '--input', help='Input tour file or group name', required=True)
    parser_adjuster_split.add_argument('-c', '--contigs', help='Breakpoint contigs, separated by comma', required=True)
    parser_adjuster_split.set_defaults(func=allhic_adjuster.adjuster.split_file)
    
    try:
        args = parser.parse_args()
        args.func(args)
    except AttributeError:
        parser.print_help()


if __name__ == "__main__":
    main()
